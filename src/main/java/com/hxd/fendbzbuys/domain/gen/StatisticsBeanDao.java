package com.hxd.fendbzbuys.domain.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hxd.fendbzbuys.domain.StatisticsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATISTICS_BEAN".
*/
public class StatisticsBeanDao extends AbstractDao<StatisticsBean, Void> {

    public static final String TABLENAME = "STATISTICS_BEAN";

    /**
     * Properties of entity StatisticsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Type = new Property(0, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property BookCount = new Property(2, String.class, "bookCount", false, "BOOK_COUNT");
    }


    public StatisticsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StatisticsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATISTICS_BEAN\" (" + //
                "\"TYPE\" TEXT," + // 0: type
                "\"NAME\" TEXT," + // 1: name
                "\"BOOK_COUNT\" TEXT);"); // 2: bookCount
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_STATISTICS_BEAN_TYPE ON \"STATISTICS_BEAN\"" +
                " (\"TYPE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATISTICS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StatisticsBean entity) {
        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(1, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String bookCount = entity.getBookCount();
        if (bookCount != null) {
            stmt.bindString(3, bookCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StatisticsBean entity) {
        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(1, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String bookCount = entity.getBookCount();
        if (bookCount != null) {
            stmt.bindString(3, bookCount);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public StatisticsBean readEntity(Cursor cursor, int offset) {
        StatisticsBean entity = new StatisticsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // bookCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StatisticsBean entity, int offset) {
        entity.setType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookCount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(StatisticsBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(StatisticsBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(StatisticsBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
